#!/usr/bin/env python3
"""
   Copyright 2017-2022 Semyon Yakimov
   This file is part of RogainingRoutes.
   RogainingRoutes is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   RogainingRoutes is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with RogainingRoutes.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import math
import shutil
import argparse
import numpy as np
from jinja2 import Environment, FileSystemLoader, Template
import sfr
import winorient
import winorient2
import sportorg
import splits_csv
import coursedata
from datetime import timedelta
from string import Template
from PIL import Image
from classes import Finishpoint


javascript_map_scale = 1

course_color_min_speed = np.array((255, 0, 0))
course_color_avr_speed = np.array((255, 255, 0))
course_color_max_speed = np.array((0, 255, 0))
course_color_default = np.array((128, 128, 128))

env = Environment(
    loader=FileSystemLoader('templates'),
    trim_blocks=True,
    lstrip_blocks=True)

class DeltaTemplate(Template):
    delimiter = "%"

def strfdelta(tdelta):
    d = {}
    hours, rem = divmod(tdelta.total_seconds(), 3600)
    mins, secs = divmod(rem, 60)
    fmt = '%H:%M:%S'
    d['H'] = int(hours)
    if hours > 0:
        d['M'] = '{:02d}'.format(int(mins))
    else:
        d['M'] = int(mins)
        fmt = '%M:%S'
    #if secs - int(secs) > 0:
    #    d['S'] = '{:06.3f}'.format(secs)
    #else:
    d['S'] = '{:02d}'.format(int(secs))
    t = DeltaTemplate(fmt)
    return t.substitute(**d)


def tohhmmss(value):
    """value in minutes"""
    if value is None:
        return ''
    td = value
    if not isinstance(value, timedelta):
        td = timedelta(minutes=value)
    return strfdelta(td)

def torgb(array):
    return 'rgb({},{},{})'.format(array[0], array[1], array[2])

env.filters['tohhmmss'] = tohhmmss
env.filters['torgb'] = torgb

def rotate(origin, point, angle):
    """
    Rotate a point counterclockwise by a given angle around a given origin.
    """
    ox, oy, *_ = origin
    px, py, *_ = point

    qx = ox + math.cos(angle) * (px - ox) - math.sin(angle) * (py - oy)
    qy = oy + math.sin(angle) * (px - ox) + math.cos(angle) * (py - oy)
    return qx, qy

def _round(p):
    return round(p[0]), round(p[1])

def colorSpeed(pos):
    ''' Linear interpolate from color course_color_min_speed (pos=0) to course_color_max_speed (pos=1)'''
    pos *= 2
    if pos <= 1:
        return ((1 - pos)*course_color_min_speed + pos*course_color_avr_speed).astype(int)
    pos -= 1
    return ((1 - pos)*course_color_avr_speed + pos*course_color_max_speed).astype(int)

def make_arrow(start, end):
    dx = end[0] - start[0]
    dy = end[1] - start[1]
    l = math.sqrt(dx**2 + dy**2)
    arrow_l = min(l*0.7, 30)
    arrow_ang = math.atan2(dy, dx)
    arrow = [
        (l, 2),
        (l - arrow_l, 7),
        (l - arrow_l, -7),
        (l, -2),
    ]
    arrow = [_round(rotate(start, (p[0] + start[0], p[1] + start[1]), arrow_ang)) for p in arrow]
    return arrow

def make_start_triangle(start, end):
    dx = end[0] - start[0]
    dy = end[1] - start[1]
    ang = math.atan2(dy, dx)
    l = min(math.sqrt(dx**2 + dy**2)*0.3, 15)
    polyline = (
        (l, 0),
        (-l*0.5, l*math.sqrt(3)/2),
        (-l*0.5, -l*math.sqrt(3)/2),
        (l, 0)
    )
    return [_round(rotate(start, (p[0] + start[0], p[1] + start[1]), ang)) for p in polyline]

def make_team_html(team, event_title, cp_coords, leg_results, leg_results_both_dirs, meters_in_pixel, map_filename, output_dir, hide_team_name):
    team.full_name = team.get_team_name()
    team.hide_team_name = hide_team_name
    title = team.get_members_str() if hide_team_name else team.get_team_name()
    title = '{} | {}'.format(title, event_title)
    team.penalty = team.sum - team.points
    if team.penalty < 0:
        team.penalty = 0
    table_titles = [
        'КП',
        'Время',
        'Сплит',
        'Очки',
        'Расстояние, км',
        'Темп, мин/км',
        'Мин/очко',
        'Место / оба напр.'
    ]

    start_x, start_y = cp_coords['start']
    if 'finish' in cp_coords:
        finish_x, finish_y = cp_coords['finish']
    else:
        finish_x, finish_y = start_x, start_y
    draw_finish_circle = False
    if finish_x != start_x or finish_y != start_y:
        draw_finish_circle = True
    start_offset_in_pixels = cp_coords['start_offset_in_pixels']
    rotate_angle = math.radians(cp_coords.get('rotate_angle', 0))
    cp_list = []
    data = []
    total_points = 0
    previos = [start_x, start_y]
    total_distance = 0
    fastest_pace = None
    slowest_pace = None

    prevCp = None
    for i in range(len(team.route)):
        cp = team.route[i]
        if isinstance(cp, Finishpoint):
            x = finish_x
            y = finish_y
        elif isinstance(cp.id, int):
            if cp.id not in cp_coords:
                print("Missing CP:", cp.id)
                x, y = start_x, start_y
            else:
                x, y = cp_coords[cp.id]
        else:
            x = start_x
            y = start_y
        x_pixels = int((x - start_x)/meters_in_pixel) + start_offset_in_pixels[0]
        y_pixels = -int((y - start_y)/meters_in_pixel) + start_offset_in_pixels[1]

        total_points += cp.points

        leg_distance = math.sqrt((x - previos[0])**2 + (y - previos[1])**2)
        leg_distance /= 1000 # km
        total_distance += leg_distance

        previos[0] = x
        previos[1] = y

        #if cp.id == 43:
        #    cp.time = None
        #    cp.split = timedelta()
        #if prevCp == 43:
        #    cp.split = timedelta()

        pace = 0
        if cp.split and leg_distance != 0:
            pace = cp.split.total_seconds()/leg_distance/60
            if slowest_pace is None or slowest_pace < pace:
                slowest_pace = pace
            if fastest_pace is None or fastest_pace > pace:
                fastest_pace = pace
        cp_list.append((*_round(rotate(start_offset_in_pixels, (x_pixels, y_pixels), rotate_angle)), pace))

        minToPoints = 0
        if cp.points:
            minToPoints = cp.split.total_seconds()/cp.points/60

        leg_place = None
        leg_n_teams = None
        leg_place_both_dirs = None
        leg_n_teams_both_dirs = None
        if prevCp is not None and cp.id is not None:
            key = '{}-{}'.format(prevCp, cp.id)
            key_both_dirs = '-'.join(sorted((str(prevCp), str(cp.id))))
            leg_place = leg_results[key][team.bib]
            leg_n_teams = len(leg_results[key])
            leg_place_both_dirs = leg_results_both_dirs[key_both_dirs][team.bib]
            leg_n_teams_both_dirs = len(leg_results_both_dirs[key_both_dirs])
        prevCp = cp.id
 
        d = [
            i,
            cp.id,
            tohhmmss(cp.time),
            tohhmmss(cp.split),
            '{} / {}'.format(cp.points, total_points) if cp.points > 0 else '',
            '{:.2f} / {:.2f}'.format(leg_distance, total_distance) if leg_distance > 0 else '',
            tohhmmss(pace) if pace else '',
            tohhmmss(minToPoints) if minToPoints else '',
            '{}({}) / {}({})'.format(leg_place, leg_n_teams, leg_place_both_dirs, leg_n_teams_both_dirs) if leg_place else ''
        ]
        data.append(d)

    cp_list1 = []
    for i in range(len(cp_list)):
        cp = cp_list[i]
        pace = cp[2]
        color = course_color_default
        if pace > 0 and slowest_pace != fastest_pace:
            color = colorSpeed((slowest_pace - pace)/(slowest_pace - fastest_pace))
        cp_list[i] = cp[0], cp[1], color

    avr_pace = team.time.total_seconds()/total_distance/60 if total_distance != 0 else 0
    total_effectiveness= team.time.total_seconds()/total_points/60 if total_points != 0 else 0 

    table_summary = [
        '',
        '',
        '',
        '',
        total_points,
        '{:.2f}'.format(total_distance),
        tohhmmss(avr_pace) if avr_pace else '',
        tohhmmss(total_effectiveness) if total_effectiveness else '',
        ''
    ]
    team.total_distance = total_distance
    team.avr_pace = avr_pace
    team.total_effectiveness = total_effectiveness
    team.planning_effectiveness = total_points/total_distance if total_distance != 0 else 0
    team.time_str = tohhmmss(team.time.total_seconds()/60)

    image =  Image.open(os.path.join(output_dir, map_filename))
    map_width, map_height = image.size

    start_triangle = make_start_triangle(cp_list[0], cp_list[1])
    cp_list[0] = start_triangle[0]

    template = env.get_template('team.html')
    with open(os.path.join(output_dir, team.get_team_html_name()), 'w', encoding='utf-8') as fd:
        fd.write(template.render(
            title=title,
            team=team,
            table_titles=table_titles,
            table_summary=table_summary,
            map_file=map_filename,
            map_scale=javascript_map_scale,
            map_width=map_width,
            map_height=map_height,
            course_color_min_speed=course_color_min_speed,
            course_color_avr_speed=course_color_avr_speed,
            course_color_max_speed=course_color_max_speed,
            cp_list=cp_list,
            arrow=make_arrow(cp_list[0], cp_list[1]),
            start_triangle=start_triangle,
            draw_finish_circle=draw_finish_circle,
            data=data))
    return team


def collect_leg_results(teams):
    all_legs = {}
    all_legs_both_dirs = {}
    for group in teams:
        for t in teams[group]:
            prevCp = None
            for cp in t.route:
                if prevCp is not None and cp.id is not None:
                    key = '{}-{}'.format(prevCp, cp.id)
                    key_both_dirs = '-'.join(sorted((str(prevCp), str(cp.id))))
                    for k,l in ((key, all_legs), (key_both_dirs, all_legs_both_dirs)):
                        if k not in l:
                            l[k] = []
                        l[k].append((t.bib, cp.split))
                prevCp = cp.id
    for l in (all_legs, all_legs_both_dirs):
        for k in l:
            l_sorted = sorted(l[k], key=lambda t: t[1])
            l[k] = {l_sorted[i][0]:(i + 1) for i in range(len(l_sorted))}
    return all_legs, all_legs_both_dirs

def collect_popularity_data(teams, cp_coords, all_legs_both_dirs):
    popularity_legs = {}
    popularity_cps = {}

    for cp_id in cp_coords:
        if isinstance(cp_id, int):
            popularity_cps[cp_id] = 0

    for group in teams:
        for t in teams[group]:
            for cp in t.route:
                if isinstance(cp.id, int):
                    popularity_cps[cp.id] += 1
    for leg in all_legs_both_dirs:
        popularity_legs[leg] = len(all_legs_both_dirs[leg])
    return {
        "legs": popularity_legs,
        "cps": popularity_cps
    }

def make_result_html(teams, event_title, cp_coords, meters_in_pixel, map_filename, output_dir, hide_team_name):
    print('Make result HTML')

    table_titles = []
    table_titles.append('Место')
    if not hide_team_name:
        table_titles.append('Команда')
    table_titles.append('Участники')
    table_titles.append('Время')
    table_titles.append('Очки')
    table_titles.append('Штраф')
    table_titles.append('Итог')
    table_titles.append('Км')
    table_titles.append('Мин/очк')

    leg_results, leg_results_both_dirs = collect_leg_results(teams)

    data = {}
    for group in teams:
        data[group] = [];
        for i in range(len(teams[group])):
            team = teams[group][i]
            teams[group][i] = make_team_html(team, event_title, cp_coords, leg_results, leg_results_both_dirs, meters_in_pixel, map_filename, output_dir, hide_team_name)
            t = []
            t.append(team.place)
            if hide_team_name:
                t.append('<a href="{}">{}</a>'.format(team.get_team_html_name(), team.get_members_str()))
            else:
                t.append('<a href="{}">{}</a>'.format(team.get_team_html_name(), team.get_team_name()))
                t.append(team.get_members_str())
            t.append(tohhmmss(team.time.total_seconds()/60))
            t.append(team.sum)
            t.append(team.penalty if team.penalty > 0 else '')
            t.append('<b>{}</b>'.format(team.points))
            t.append('{:.2f}'.format(team.total_distance))
            t.append('{:.2f}'.format(team.total_effectiveness))
            data[group].append(t)

    template = env.get_template('results.html')
    with open(os.path.join(output_dir, 'index.html'), 'w', encoding='utf-8') as fd:
        group_list = sorted(teams, reverse=True)
        fd.write(template.render(title=event_title, table_titles=table_titles, group_list=group_list, data=data))
    return leg_results_both_dirs

def make_popularity_map_html(cp_coords, meters_in_pixel, map_filename, output_dir, popularity_data, title="Популярность маршрутов"):
    """
    popularity_data: {
        "legs": { "1-2": 5, "2-3": 10, ... },  # сколько раз каждая пара посещена
        "cps": { 1: 15, 2: 18, ... }           # сколько раз каждая точка посещена
    }
    """

    from collections import defaultdict

    image = Image.open(os.path.join(output_dir, map_filename))
    map_width, map_height = image.size

    start_x, start_y = cp_coords['start']
    start_offset_in_pixels = cp_coords['start_offset_in_pixels']
    rotate_angle = math.radians(cp_coords.get('rotate_angle', 0))

    def coord_to_pixel(x, y):
        x_pixels = int((x - start_x)/meters_in_pixel) + start_offset_in_pixels[0]
        y_pixels = -int((y - start_y)/meters_in_pixel) + start_offset_in_pixels[1]
        return _round(rotate(start_offset_in_pixels, (x_pixels, y_pixels), rotate_angle))

    # 1. Точки (CP) с радиусом круга
    cp_circles = []
    max_cp_visits = max(popularity_data["cps"].values())
    for cp_id, count in popularity_data["cps"].items():
        if cp_id not in cp_coords:
            continue
        x, y = coord_to_pixel(*cp_coords[cp_id])
        radius = 4 + 10 * (count / max_cp_visits)  # базовый + масштаб
        cp_circles.append((x, y, radius, count))

    def parse_cp_id(s):
        if s in ('S', 'F'):
            return s
        return int(s)

    def get_cp_coordinates(cp_id, cp_coords):
        if cp_id == 'S':
            return cp_coords['start']
        elif cp_id == 'F':
            return cp_coords.get('finish', cp_coords['start'])
        elif isinstance(cp_id, int) and cp_id in cp_coords:
            return cp_coords[cp_id]
        else:
            return None

    # 2. Перегоны (между CP), линия с толщиной
    leg_lines = []
    max_leg_popularity = max(popularity_data["legs"].values())
    for key, count in popularity_data["legs"].items():
        a_str, b_str = key.split('-')
        a, b = parse_cp_id(a_str), parse_cp_id(b_str)
        #if a not in cp_coords or b not in cp_coords:
        #    continue
        x1, y1 = coord_to_pixel(*get_cp_coordinates(a, cp_coords))
        x2, y2 = coord_to_pixel(*get_cp_coordinates(b, cp_coords))
        width = 2 + 10 * (count / max_leg_popularity)
        leg_lines.append((x1, y1, x2, y2, width, count))

    # Рендер
    template = env.get_template('popularity_map.html')
    with open(os.path.join(output_dir, "popularity_map.html"), 'w', encoding='utf-8') as fd:
        fd.write(template.render(
            title=title,
            map_file=map_filename,
            map_width=map_width,
            map_height=map_height,
            cp_circles=cp_circles,
            leg_lines=leg_lines
        ))

def make_parser():
    parser = argparse.ArgumentParser(
        description='Command line utility to generate routes.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('file', nargs='?', default='splits.html',
        help='results file: SportOrg JSON, CSV, WinOrient or SFR splits HTML')
    parser.add_argument('-c', '--coords-file', default='coords.csv',
        help='coords GPX or CSV file')
    parser.add_argument('-m', '--map-file', default='map.jpg',
        help='map file')
    parser.add_argument('-x', '--start-x', type=int, required=True,
        help='start X offset in pixels of the map')
    parser.add_argument('-y', '--start-y', type=int, required=True,
        help='start Y offset in pixels of the map')
    parser.add_argument('-d', '--map-dpi', type=int, default='72',
        help='map DPI')
    parser.add_argument('-l', '--map-scale', type=int, default='25000',
        help='map scale')
    parser.add_argument('-a', '--angle', type=float, default='0.0',
        help='map rotate angle')
    parser.add_argument('-o', '--output-dir', default='output',
        help='output directory')
    parser.add_argument('--hide-team-name', action='store_true')
    return parser

if __name__ == '__main__':
    args,_ = make_parser().parse_known_args()

    input_filename_extension = os.path.splitext(args.file)[1]
    if input_filename_extension == '.json':
        teams, event_title = sportorg.parse_sportorg_result_json(args.file)
    elif input_filename_extension == '.csv':
        teams, event_title = splits_csv.parse_splits_csv(args.file)
    elif input_filename_extension == '.htm':
        #teams, event_title = winorient.parse_winorient_splits_html(args.file)
        teams, event_title = winorient2.parse_winorient_printout_html(args.file)
    else:
        teams, event_title = sfr.parse_SFR_splits_html(args.file)
    cp_coords = coursedata.parse_course_data_file(args.coords_file)
    cp_coords['start_offset_in_pixels'] = (args.start_x, args.start_y)
    cp_coords['rotate_angle'] = args.angle

    #shutil.rmtree(args.output_dir, ignore_errors=True)
    if not os.path.isdir(args.output_dir):
        os.mkdir(args.output_dir)

    output_map_filename = 'map' + os.path.splitext(args.map_file)[1]

    shutil.copy(args.map_file, os.path.join(args.output_dir, output_map_filename))
    shutil.copy('templates/style.css', args.output_dir)

    meters_in_pixel = args.map_scale*0.0254/args.map_dpi
    print('Meters in pixel:', meters_in_pixel)
    leg_results_both_dirs = make_result_html(teams, event_title, cp_coords, meters_in_pixel, output_map_filename, args.output_dir, args.hide_team_name)
    popularity_data = collect_popularity_data(teams, cp_coords, leg_results_both_dirs)
    make_popularity_map_html(cp_coords, meters_in_pixel, output_map_filename, args.output_dir, popularity_data)

