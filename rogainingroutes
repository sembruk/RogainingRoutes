#!/usr/bin/env python3
"""
   Copyright 2017-2025 Semyon Yakimov
   This file is part of RogainingRoutes.
   RogainingRoutes is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   RogainingRoutes is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with RogainingRoutes.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import math
import json
import shutil
import argparse
import numpy as np
from jinja2 import Environment, FileSystemLoader, Template
import sfr
import oescore
import winorient
import winorient2
import sportorg
import splits_csv
import coursedata
from datetime import timedelta
from string import Template
from PIL import Image
from classes import Startpoint, Finishpoint


javascript_map_scale = 1

course_color_min_speed = np.array((255, 0, 0))
course_color_avr_speed = np.array((255, 255, 0))
course_color_max_speed = np.array((0, 255, 0))
course_color_default = np.array((128, 128, 128))

LABELS = {
    'en': {
        'results_title': "Teams Routes",
        'popularity_map_title': "Popularity Map",
        'show_global': "Show global",
        'close_button': "Close",
        'place': "Place",
        'group_place': "Group Place",
        'team': "Team",
        'members': "Members",
        'time': "Time",
        'points': "Points",
        'penalty': "Penalty",
        'total': "Total",
        'km_title': "Km",
        'distance': "Distance",
        'pts_per_km': "Pts/km",
        'pts_per_h': "Pts/h",
        'segment': "Segment",
        'split': "Split",
        'length': "Length",
        'speed': "Speed",
        'pace': "Pace",
        'rank': "Rank",
        'm': "m",
        'km_h': "km/h",
        'min_km': "min/km",
        'km': "km",
        'h': "h",
        'popularity': "Popularity",
        'cp_teams_count': "Teams",
    },
    'ru': {
        'results_title': "Пути участников",
        'popularity_map_title': "Популярность маршрутов",
        'show_global': "Показать общую таблицу",
        'close_button': "Закрыть",
        'place': "Место",
        'group_place': "В группе",
        'team': "Команда",
        'members': "Участники",
        'time': "Время",
        'points': "Очки",
        'penalty': "Штраф",
        'total': "Итог",
        'km_title': "Км",
        'distance': "Расстояние",
        'pts_per_km': "Очк/км",
        'pts_per_h': "Очк/ч",
        'segment': "Перегон",
        'split': "Сплит",
        'length': "Длина",
        'speed': "Скорость",
        'pace': "Темп",
        'rank': "Место",
        'm': "м",
        'km_h': "км/ч",
        'min_km': "мин/км",
        'km': "км",
        'h': "ч",
        'popularity': "Популярность",
        'cp_teams_count': "Посещений",
    }
}

env = Environment(
    loader=FileSystemLoader('templates'),
    trim_blocks=True,
    lstrip_blocks=True)

class DeltaTemplate(Template):
    delimiter = "%"

def strfdelta(tdelta):
    d = {}
    hours, rem = divmod(tdelta.total_seconds(), 3600)
    mins, secs = divmod(rem, 60)
    fmt = '%H:%M:%S'
    d['H'] = int(hours)
    if hours > 0:
        d['M'] = '{:02d}'.format(int(mins))
    else:
        d['M'] = int(mins)
        fmt = '%M:%S'
    #if secs - int(secs) > 0:
    #    d['S'] = '{:06.3f}'.format(secs)
    #else:
    d['S'] = '{:02d}'.format(int(secs))
    t = DeltaTemplate(fmt)
    return t.substitute(**d)


def tohhmmss(value):
    """value in minutes"""
    if value is None:
        return ''
    td = value
    if not isinstance(value, timedelta):
        td = timedelta(minutes=value)
    return strfdelta(td)

def torgb(array):
    return 'rgb({},{},{})'.format(array[0], array[1], array[2])

env.filters['tohhmmss'] = tohhmmss
env.filters['torgb'] = torgb

def rotate(origin, point, angle):
    """
    Rotate a point counterclockwise by a given angle around a given origin.
    """
    ox, oy, *_ = origin
    px, py, *_ = point

    qx = ox + math.cos(angle) * (px - ox) - math.sin(angle) * (py - oy)
    qy = oy + math.sin(angle) * (px - ox) + math.cos(angle) * (py - oy)
    return qx, qy

def _round(p):
    return round(p[0]), round(p[1])

def colorSpeed(pos):
    ''' Linear interpolate from color course_color_min_speed (pos=0) to course_color_max_speed (pos=1)'''
    pos *= 2
    if pos <= 1:
        return ((1 - pos)*course_color_min_speed + pos*course_color_avr_speed).astype(int)
    pos -= 1
    return ((1 - pos)*course_color_avr_speed + pos*course_color_max_speed).astype(int)

#def make_arrow(start, end):
#    dx = end[0] - start[0]
#    dy = end[1] - start[1]
#    l = math.sqrt(dx**2 + dy**2)
#    arrow_l = min(l*0.7, 30)
#    arrow_ang = math.atan2(dy, dx)
#    arrow = [
#        (l, 2),
#        (l - arrow_l, 7),
#        (l - arrow_l, -7),
#        (l, -2),
#    ]
#    arrow = [_round(rotate(start, (p[0] + start[0], p[1] + start[1]), arrow_ang)) for p in arrow]
#    return arrow
#
#def make_start_triangle(start, end):
#    dx = end[0] - start[0]
#    dy = end[1] - start[1]
#    ang = math.atan2(dy, dx)
#    l = min(math.sqrt(dx**2 + dy**2)*0.3, 15)
#    polyline = (
#        (l, 0),
#        (-l*0.5, l*math.sqrt(3)/2),
#        (-l*0.5, -l*math.sqrt(3)/2),
#        (l, 0)
#    )
#    return [_round(rotate(start, (p[0] + start[0], p[1] + start[1]), ang)) for p in polyline]

def collect_leg_results(teams):
    all_legs = {}
    all_legs_both_dirs = {}
    for group in teams:
        for t in teams[group]:
            prevCp = None
            for cp in t.route:
                if prevCp is not None and cp.id is not None:
                    key = '{}-{}'.format(prevCp, cp.id)
                    key_both_dirs = '-'.join(sorted((str(prevCp), str(cp.id))))
                    for k,l in ((key, all_legs), (key_both_dirs, all_legs_both_dirs)):
                        if k not in l:
                            l[k] = []
                        l[k].append((t.bib, cp.split))
                prevCp = cp.id
    for l in (all_legs, all_legs_both_dirs):
        for k in l:
            l_sorted = sorted(l[k], key=lambda t: t[1])
            l[k] = {l_sorted[i][0]:(i + 1) for i in range(len(l_sorted))}
    return all_legs, all_legs_both_dirs

def collect_popularity_data(teams, cp_coords, all_legs_both_dirs):
    popularity_legs = {}
    popularity_cps = {}

    for cp_id in cp_coords:
        if isinstance(cp_id, int):
            popularity_cps[cp_id] = 0

    for group in teams:
        for t in teams[group]:
            for cp in t.route:
                if isinstance(cp.id, int):
                    popularity_cps[cp.id] += 1
    for leg in all_legs_both_dirs:
        popularity_legs[leg] = len(all_legs_both_dirs[leg])
    return {
        "legs": popularity_legs,
        "cps": popularity_cps
    }

def get_cp_coords(cp_id, cp_coords):
    if cp_id == Startpoint.ID:
        return cp_coords['start']
    elif cp_id == Finishpoint.ID:
        return cp_coords.get('finish', cp_coords['start'])
    elif isinstance(cp_id, int) and cp_id in cp_coords:
        return cp_coords[cp_id]
    else:
        return None

def generate_data_json(teams, event_title, cp_coords, meters_in_pixel, map_filename, output_dir, leg_results, leg_results_both_dirs):

    start_x, start_y = cp_coords['start']
    offset_x, offset_y = cp_coords['start_offset_in_pixels']
    angle = math.radians(cp_coords.get('rotate_angle', 0))

    cp_pixel_coords = {}

    for cp_code in cp_coords:
        if not isinstance(cp_code, int) and not cp_code in ('start', 'finish'):
            continue
        x, y = cp_coords[cp_code]

        # Convert to pixels and rotate
        x_px = int((x - start_x)/meters_in_pixel) + offset_x
        y_px = -int((y - start_y)/meters_in_pixel) + offset_y
        x_rot, y_rot = _round(rotate((offset_x, offset_y), (x_px, y_px), angle))
        if cp_code == 'start':
            cp_code = Startpoint.ID
        elif cp_code == 'finish':
            cp_code = Finishpoint.ID
        cp_pixel_coords[cp_code] = (x_rot, y_rot)
    if not 'finish' in cp_coords:
        cp_pixel_coords[Finishpoint.ID] = cp_pixel_coords[Startpoint.ID]

    team_routes = {}
    leg_lengths = {}

    for group in teams:
        team_routes[group] = []
        for team in teams[group]:
            total_points = 0
            total_distance = 0
            slowest_pace = None
            fastest_pace = None
            prev_cp = None

            team_data = {
                'bib': team.bib,
                'group': group,
                'place': team.place,
                'name': team.get_team_name(),
                'members': team.get_members_str(),
                'time': tohhmmss(team.time.total_seconds()/60),
                'sum': team.sum,
                'penalty': team.penalty if team.penalty > 0 else (team.sum - team.points if team.sum > team.points else 0),
                'points': team.points,
                'route': []
            }

            for cp in team.route:
                cp_code = cp.id

                leg_distance = 0
                if prev_cp is not None and cp_code is not None:
                    key = '-'.join(sorted((str(prev_cp), str(cp_code))))
                    if key in leg_lengths:
                        leg_distance = leg_lengths[key]
                    else:
                        prev_x, prev_y = get_cp_coords(prev_cp, cp_coords)
                        x, y = get_cp_coords(cp_code, cp_coords)
                        leg_distance = math.sqrt((x - prev_x)**2 + (y - prev_y)**2)/1000
                        leg_lengths[key] = leg_distance

                total_distance += leg_distance
                total_points += cp.points

                pace = cp.split.total_seconds()/leg_distance/60 if cp.split and leg_distance else 0

                if pace > 0:
                    if slowest_pace is None or slowest_pace < pace:
                        slowest_pace = pace
                    if fastest_pace is None or fastest_pace > pace:
                        fastest_pace = pace

                min_per_point = cp.split.total_seconds()/cp.points/60 if cp.points else 0

                leg_place = leg_n_teams = leg_place_both_dirs = leg_n_teams_both_dirs = ''
                if prev_cp is not None and cp_code is not None:
                    key = f'{prev_cp}-{cp_code}'
                    key_both_dirs = '-'.join(sorted((str(prev_cp), str(cp_code))))
                    if key in leg_results and team.bib in leg_results[key]:
                        leg_place = leg_results[key][team.bib]
                        leg_n_teams = len(leg_results[key])
                    if key_both_dirs in leg_results_both_dirs and team.bib in leg_results_both_dirs[key_both_dirs]:
                        leg_place_both_dirs = leg_results_both_dirs[key_both_dirs][team.bib]
                        leg_n_teams_both_dirs = len(leg_results_both_dirs[key_both_dirs])
                prev_cp = cp_code

                team_data['route'].append({
                    'cp': cp_code,
                    'split': cp.split.total_seconds() if cp.split else 0,
                    'points': cp.points,
                    'leg_len': leg_distance,
                    'pace': pace,
                    #'min_per_point': tohhmmss(min_per_point) if min_per_point else '',
                    'leg_ranking': f'{leg_place}({leg_n_teams}) / {leg_place_both_dirs}({leg_n_teams_both_dirs})' if leg_place else ''
                })

            for cp in team_data['route']:
                pace = cp['pace']
                cp['pace'] = tohhmmss(pace) if pace else ''
                if pace > 0 and slowest_pace != fastest_pace:
                    cp['color'] = '#{:02X}{:02X}{:02X}'.format(*colorSpeed((slowest_pace - pace)/(slowest_pace - fastest_pace)))

            team_data['distance_km'] = '{:.2f}'.format(total_distance)
            team_data['speed'] = '{:.2f}'.format(total_distance*3600/team.time.total_seconds()) if team.time.total_seconds() > 0 else ''
            pace = team.time.total_seconds()/total_distance/60 if total_distance > 0 else 0
            team_data['pace'] = tohhmmss(pace) if pace else ''
            #team_data['min_per_point'] = tohhmmss(team.time.total_seconds() / team.points / 60) if team.points else ''
            team_data['points_per_hour'] = '{:.2f}'.format(team.points*3600/team.time.total_seconds()) if team.time and team.points > 0 else ''
            team_data['points_per_km'] = '{:.2f}'.format(team.points/total_distance) if total_distance > 0 else ''
            team_routes[group].append(team_data)

    data = {
        'event_title': event_title,
        'map_filename': map_filename,
        'teams': team_routes,
        'cp_coords': cp_pixel_coords,
        'leg_lengths': leg_lengths
    }

    # Save data.json
    #with open(os.path.join(output_dir, 'data.json'), 'w', encoding='utf-8') as f:
    #    json.dump(data, f, ensure_ascii=False, indent=2)
    return json.dumps(data, ensure_ascii=False, separators=(',', ':'))

def generate_result_html(event_title, map_filename, output_dir, data_json, lang='ru', hide_team_name=False):
    template = env.get_template('results.html')
    labels = LABELS.get(lang, LABELS['ru'])
    with open(os.path.join(output_dir, 'index.html'), 'w', encoding='utf-8') as fd:
        fd.write(template.render(
            event_title=event_title,
            map_filename=map_filename,
            embedded_json=data_json,
            hide_team_name=hide_team_name,
            l=labels,
        ))

def make_popularity_map_html(cp_coords, meters_in_pixel, map_filename, output_dir, popularity_data, title, lang='ru'):
    """
    popularity_data: {
        "legs": { "1-2": 5, "2-3": 10, ... },  # сколько раз каждая пара посещена
        "cps": { 1: 15, 2: 18, ... }           # сколько раз каждая точка посещена
    }
    """

    from collections import defaultdict

    image = Image.open(os.path.join(output_dir, map_filename))
    map_width, map_height = image.size

    start_x, start_y = cp_coords['start']
    start_offset_in_pixels = cp_coords['start_offset_in_pixels']
    rotate_angle = math.radians(cp_coords.get('rotate_angle', 0))

    def coord_to_pixel(x, y):
        x_pixels = int((x - start_x)/meters_in_pixel) + start_offset_in_pixels[0]
        y_pixels = -int((y - start_y)/meters_in_pixel) + start_offset_in_pixels[1]
        return _round(rotate(start_offset_in_pixels, (x_pixels, y_pixels), rotate_angle))

    # 1. Точки (CP) с радиусом круга
    cp_circles = []
    max_cp_visits = max(popularity_data["cps"].values())
    for cp_id, count in popularity_data["cps"].items():
        if cp_id not in cp_coords:
            continue
        x, y = coord_to_pixel(*cp_coords[cp_id])
        radius = 4 + 10 * (count / max_cp_visits)  # базовый + масштаб
        cp_circles.append((x, y, radius, count))

    def parse_cp_id(s):
        if s in ('S', 'F'):
            return s
        return int(s)

    # 2. Перегоны (между CP), линия с толщиной
    leg_lines = []
    max_leg_popularity = max(popularity_data["legs"].values())
    for key, count in popularity_data["legs"].items():
        a_str, b_str = key.split('-')
        a, b = parse_cp_id(a_str), parse_cp_id(b_str)
        #if a not in cp_coords or b not in cp_coords:
        #    continue
        x1, y1 = coord_to_pixel(*get_cp_coords(a, cp_coords))
        x2, y2 = coord_to_pixel(*get_cp_coords(b, cp_coords))
        width = 2 + 10 * (count / max_leg_popularity)
        leg_lines.append((x1, y1, x2, y2, width, count))

    # Рендер
    template = env.get_template('popularity_map.html')
    with open(os.path.join(output_dir, "popularity_map.html"), 'w', encoding='utf-8') as fd:
        fd.write(template.render(
            title=title,
            map_file=map_filename,
            map_width=map_width,
            map_height=map_height,
            cp_circles=cp_circles,
            leg_lines=leg_lines,
            l=LABELS.get(lang, LABELS['ru'])
        ))

def make_parser():
    parser = argparse.ArgumentParser(
        description='Command line utility to generate routes.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('file', nargs='?', default='splits.html',
        help='results file: SportOrg JSON, CSV, WinOrient or SFR splits HTML')
    parser.add_argument('-c', '--coords-file', default='coords.csv',
        help='coords GPX or CSV file')
    parser.add_argument('-m', '--map-file', default='map.jpg',
        help='map file')
    parser.add_argument('-x', '--start-x', type=int, required=True,
        help='start X offset in pixels of the map')
    parser.add_argument('-y', '--start-y', type=int, required=True,
        help='start Y offset in pixels of the map')
    parser.add_argument('-d', '--map-dpi', type=int, default='72',
        help='map DPI')
    parser.add_argument('-l', '--map-scale', type=int, default='25000',
        help='map scale')
    parser.add_argument('-a', '--angle', type=float, default='0.0',
        help='map rotate angle')
    parser.add_argument('-o', '--output-dir', default='output',
        help='output directory')
    parser.add_argument('--lang', default='ru', help='language')
    parser.add_argument('--hide-team-name', action='store_true')
    return parser

if __name__ == '__main__':
    args,_ = make_parser().parse_known_args()

    input_filename_extension = os.path.splitext(args.file)[1].lower()
    if input_filename_extension == '.json':
        teams, event_title = sportorg.parse_sportorg_result_json(args.file)
    elif input_filename_extension == '.csv':
        teams, event_title = splits_csv.parse_splits_csv(args.file)
    elif input_filename_extension == '.htm':
        #teams, event_title = winorient.parse_winorient_splits_html(args.file)
        teams, event_title = winorient2.parse_winorient_printout_html(args.file)
    elif input_filename_extension == '.html':
        # If file contains 'OEScore' string in header, then it's OEScore
        # splits HTML
        with open(args.file, 'r', encoding='utf-8') as fd:
            head = ''.join(fd.readline() for _ in range(10))
        if 'OEScore' in head:
            teams, event_title = oescore.parse_OEScore_splits_html(args.file)
        else:
            teams, event_title = sfr.parse_SFR_splits_html(args.file)
    else:
        raise Exception('Unknown file extension: ' + input_filename_extension)

    print('Event title:', event_title)
    cp_coords = coursedata.parse_course_data_file(args.coords_file)
    cp_coords['start_offset_in_pixels'] = (args.start_x, args.start_y)
    cp_coords['rotate_angle'] = args.angle

    #shutil.rmtree(args.output_dir, ignore_errors=True)
    if not os.path.isdir(args.output_dir):
        os.mkdir(args.output_dir)

    output_map_filename = 'map' + os.path.splitext(args.map_file)[1]

    shutil.copy(args.map_file, os.path.join(args.output_dir, output_map_filename))
    shutil.copy('templates/style.css', args.output_dir)

    meters_in_pixel = args.map_scale*0.0254/args.map_dpi
    print('Meters in pixel:', meters_in_pixel)
    leg_results, leg_results_both_dirs = collect_leg_results(teams)
    data_json = generate_data_json(teams, event_title, cp_coords, meters_in_pixel, output_map_filename, args.output_dir, leg_results, leg_results_both_dirs)
    generate_result_html(event_title, output_map_filename, args.output_dir, data_json, args.lang, args.hide_team_name)
    popularity_data = collect_popularity_data(teams, cp_coords, leg_results_both_dirs)
    make_popularity_map_html(cp_coords, meters_in_pixel, output_map_filename, args.output_dir, popularity_data, event_title, args.lang)

